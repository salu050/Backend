spring.application.name=pss
# =======================================================
# Spring Boot Application Properties - suza
# =======================================================



# Server Configuration
# ====================
# The port on which the Spring Boot application will run.
# Default is 8080. You can change it if needed.
server.port=8082

# =======================================================
# HTTPS Configuration
# =======================================================
server.ssl.enabled=true
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-type=PKCS12
server.ssl.key-store-password=Salim@6919
server.ssl.key-alias=springboot

---

# =======================================================
# PostgreSQL Database Configuration
# =======================================================
# Connection URL for your PostgreSQL database.
# Using 'veta' as your database name.
spring.datasource.url=jdbc:postgresql://localhost:5432/veta

# Username for your PostgreSQL database.
# IMPORTANT: Updated to 'postgres' based on your pgAdmin screenshot.
spring.datasource.username=postgres

# Password for your PostgreSQL database.
# IMPORTANT: Updated to '12345678'. Ensure this is the actual password for your 'postgres' user.
spring.datasource.password=12345678

# Driver class name for PostgreSQL. Do not change this.
spring.datasource.driver-class-name=org.postgresql.Driver

---

# =======================================================
# JPA and Hibernate Configuration
# =======================================================
# Specifies the SQL dialect used by Hibernate for PostgreSQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# DDL Auto: Controls how Hibernate interacts with the database schema.
# - update: Updates the schema based on your entities. Useful for development, but be cautious in production.
# - create: Creates the schema from scratch every time the app starts (data will be lost!). Good for testing.
# - create-drop: Creates on startup, drops on shutdown. Good for testing.
# - none: Hibernate will not manage the schema. Recommended for production; manage schema with Flyway/Liquibase.
spring.jpa.hibernate.ddl-auto=update

# Shows SQL queries generated by Hibernate in the console.
# Set to false in production for performance and security.
spring.jpa.show-sql=true

# Formats the SQL queries to be more readable.
spring.jpa.properties.hibernate.format_sql=true

---

# =======================================================
# Email Service Configuration (JavaMailSender)
# Required by com.example.suza.service.EmailService
# =======================================================
# Ensure you have the 'spring-boot-starter-mail' dependency in your pom.xml/build.gradle
# Example for Gmail SMTP (adjust for other providers)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
# Or 465 for SSL (This is now a separate comment line, no longer inline with the port value)
# !!! IMPORTANT: These are still likely incorrect for your Gmail account.
# You need your actual Gmail email address and a generated App Password here.
spring.mail.username=your_actual_gmail_email@gmail.com # e.g., myappemail@gmail.com
spring.mail.password=YOUR_GENERATED_GMAIL_APP_PASSWORD # e.g., abcd efgh ijkl mnop

# Additional Mail Properties
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true # Use true for port 587
spring.mail.properties.mail.smtp.starttls.required=true # Recommended for security
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com # Trust the Gmail SMTP server

# If using port 465 (SSL/TLS implicit)
# spring.mail.properties.mail.smtp.socketFactory.port=465
# spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
# spring.mail.properties.mail.smtp.socketFactory.fallback=false

---

# =======================================================
# JWT (JSON Web Token) Configuration
# Required by com.example.suza.Security.JwtUtil
# =======================================================
# JWT Secret Key: A long, random, and cryptographically secure string.
# Minimum length for HS256 is 32 characters (256 bits).
# Use a tool like https://www.javainuse.com/jwtgenerator to generate a secure key.
# !!! IMPORTANT: NEVER expose this key in production. Use environment variables or a secrets manager.
jwt.secret=IVI8yn-K6oqRUm6yCcyJqGCVJRjNfNM6rHZDQ4ZdMPY=
# 24 hours in milliseconds
jwt.expiration=86400000

---

# =======================================================
# CORS (Cross-Origin Resource Sharing) Configuration in SecurityConfig.java
# Reminder for frontend URL
# =======================================================
# The CORS configuration is primarily handled within your SecurityConfig.java
# via the `corsConfigurationSource()` bean.
# Ensure that `http://localhost:3000` (or your actual React app URL) is correctly
# specified there:
# .allowedOrigins("http://localhost:3000")
